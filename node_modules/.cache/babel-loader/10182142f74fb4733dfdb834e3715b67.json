{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Desarrollo-Ccs\\\\Documents\\\\GitHub\\\\cursosNuevos\\\\Televisa - Politicas de captura Think\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\Desarrollo-Ccs\\\\Documents\\\\GitHub\\\\cursosNuevos\\\\Televisa - Politicas de captura Think\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Desarrollo-Ccs\\\\Documents\\\\GitHub\\\\cursosNuevos\\\\Televisa - Politicas de captura Think\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Desarrollo-Ccs\\\\Documents\\\\GitHub\\\\cursosNuevos\\\\Televisa - Politicas de captura Think\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Desarrollo-Ccs\\\\Documents\\\\GitHub\\\\cursosNuevos\\\\Televisa - Politicas de captura Think\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport AuthService from \"./AuthService\"; //Estas son las lineas que debes switchear cuando estes haciendo tus pruebas\n\nvar hostURL = \"https://api.ccscontactcenter.com\"; //const hostURL = 'http://localhost:8082'\n\nvar API_CCS = /*#__PURE__*/function () {\n  function API_CCS() {\n    _classCallCheck(this, API_CCS);\n\n    this.Auth = new AuthService();\n    this.fetch = this.fetch.bind(this);\n  }\n\n  _createClass(API_CCS, [{\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch(_x, _x2) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, options) {\n        var headers;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                headers = {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                };\n                _context.next = 3;\n                return this.Auth.loggedIn();\n\n              case 3:\n                if (!_context.sent) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.Auth.getToken();\n\n              case 6:\n                _context.t0 = _context.sent;\n                headers[\"Authorization\"] = \"Bearer \" + _context.t0;\n                _context.next = 11;\n                break;\n\n              case 10:\n                window.location.href = \"/login\";\n\n              case 11:\n                return _context.abrupt(\"return\", fetch(url, _objectSpread({\n                  headers: headers\n                }, options)).then(this._checkStatus).then(function (response) {\n                  return response.json();\n                }));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref.apply(this, arguments);\n      };\n    }())\n  }, {\n    key: \"getCampaignAvatar\",\n    value: function getCampaignAvatar(id) {\n      return this.fetch(hostURL + \"/v1/Campaigns/Avatar?id=\" + id, {\n        method: \"GET\"\n      }).then(function (res) {\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"insertarEncuesta\",\n    value: function insertarEncuesta(data) {\n      /*Esta función está bien, solamente que cuando hagas tus pruebas, debes de cambiar \n      la variable hostURL (Lineas 3 y 4 de este archivo), para apuntar a localhost y no a api.ccscontactcenter\n      cuando ya este probado y funcionando en localhost, publicamos tu endpoint en producción (api.ccscontactcenter.com), pero ese es otro paso\n      */\n      return this.fetch(hostURL + \"/v1/capacitacion/formularioEncuesta\", {\n        method: \"POST\",\n        body: JSON.stringify(data)\n      }).then(function (res) {\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"guardaActividad\",\n    value: function guardaActividad(data) {\n      return this.fetch(hostURL + \"/v1/capacitacion/Actividades\", {\n        method: \"POST\",\n        body: JSON.stringify(data)\n      }).then(function (res) {\n        return Promise.resolve(res);\n      });\n    }\n  }]);\n\n  return API_CCS;\n}();\n\nexport { API_CCS as default };","map":{"version":3,"sources":["C:/Users/Desarrollo-Ccs/Documents/GitHub/cursosNuevos/Televisa - Politicas de captura Think/src/services/API_CCS.js"],"names":["AuthService","hostURL","API_CCS","Auth","fetch","bind","url","options","headers","Accept","loggedIn","getToken","window","location","href","then","_checkStatus","response","json","id","method","res","Promise","resolve","data","body","JSON","stringify"],"mappings":";;;;;AAAA,OAAOA,WAAP,MAAwB,eAAxB,C,CAEA;;AACA,IAAMC,OAAO,GAAG,kCAAhB,C,CACA;;IAEqBC,O;AACnB,qBAAc;AAAA;;AACZ,SAAKC,IAAL,GAAY,IAAIH,WAAJ,EAAZ;AACA,SAAKI,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACD;;;;;;;;;;;;;;;2FAEWC,G,EAAKC,O;;;;;;AACTC,gBAAAA,O,GAAU;AACdC,kBAAAA,MAAM,EAAE,kBADM;AAEd,kCAAgB;AAFF,iB;;uBAKN,KAAKN,IAAL,CAAUO,QAAV,E;;;;;;;;;uBACsC,KAAKP,IAAL,CAAUQ,QAAV,E;;;;AAA9CH,gBAAAA,OAAO,CAAC,eAAD,C,GAAoB,S;;;;;AAE3BI,gBAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;;;iDAGKV,KAAK,CAACE,GAAD;AACVE,kBAAAA,OAAO,EAAPA;AADU,mBAEPD,OAFO,EAAL,CAIJQ,IAJI,CAIC,KAAKC,YAJN,EAKJD,IALI,CAKC,UAAAE,QAAQ;AAAA,yBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,iBALT,C;;;;;;;;;;;;;;;;sCASSC,E,EAAI;AACpB,aAAO,KAAKf,KAAL,CAAWH,OAAO,GAAG,0BAAV,GAAuCkB,EAAlD,EAAsD;AAC3DC,QAAAA,MAAM,EAAE;AADmD,OAAtD,EAEJL,IAFI,CAEC,UAAAM,GAAG,EAAI;AACb,eAAOC,OAAO,CAACC,OAAR,CAAgBF,GAAhB,CAAP;AACD,OAJM,CAAP;AAKD;;;qCAEgBG,I,EAAK;AAEpB;;;;AAOA,aAAO,KAAKpB,KAAL,CAAWH,OAAO,GAAG,qCAArB,EAA4D;AACjEmB,QAAAA,MAAM,EAAE,MADyD;AAEhEK,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,IAAf;AAF0D,OAA5D,EAGJT,IAHI,CAGC,UAAAM,GAAG,EAAI;AACb,eAAOC,OAAO,CAACC,OAAR,CAAgBF,GAAhB,CAAP;AACD,OALM,CAAP;AAMD;;;oCAEeG,I,EAAK;AACnB,aAAO,KAAKpB,KAAL,CAAWH,OAAO,GAAG,8BAArB,EAAqD;AAC1DmB,QAAAA,MAAM,EAAE,MADkD;AAEzDK,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,IAAf;AAFmD,OAArD,EAGJT,IAHI,CAGC,UAAAM,GAAG,EAAI;AACb,eAAOC,OAAO,CAACC,OAAR,CAAgBF,GAAhB,CAAP;AACD,OALM,CAAP;AAMD;;;;;;SA3DkBnB,O","sourcesContent":["import AuthService from \"./AuthService\";\n\n//Estas son las lineas que debes switchear cuando estes haciendo tus pruebas\nconst hostURL = \"https://api.ccscontactcenter.com\";\n//const hostURL = 'http://localhost:8082'\n\nexport default class API_CCS {\n  constructor() {\n    this.Auth = new AuthService();\n    this.fetch = this.fetch.bind(this);\n  }\n\n  async fetch(url, options) {\n    const headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (await this.Auth.loggedIn()) {\n      headers[\"Authorization\"] = \"Bearer \" + (await this.Auth.getToken());\n    } else {\n      window.location.href = \"/login\";\n    }\n\n    return fetch(url, {\n      headers,\n      ...options\n    })\n      .then(this._checkStatus)\n      .then(response => response.json());\n  }\n\n\n  getCampaignAvatar(id) {\n    return this.fetch(hostURL + \"/v1/Campaigns/Avatar?id=\" + id, {\n      method: \"GET\"\n    }).then(res => {\n      return Promise.resolve(res);\n    });\n  }\n\n  insertarEncuesta(data){\n\n    /*Esta función está bien, solamente que cuando hagas tus pruebas, debes de cambiar \n    la variable hostURL (Lineas 3 y 4 de este archivo), para apuntar a localhost y no a api.ccscontactcenter\n    cuando ya este probado y funcionando en localhost, publicamos tu endpoint en producción (api.ccscontactcenter.com), pero ese es otro paso\n    */\n\n\n\n    return this.fetch(hostURL + \"/v1/capacitacion/formularioEncuesta\", {\n      method: \"POST\",\n       body: JSON.stringify(data),\n    }).then(res => {\n      return Promise.resolve(res);\n    });\n  }\n\n  guardaActividad(data){\n    return this.fetch(hostURL + \"/v1/capacitacion/Actividades\", {\n      method: \"POST\",\n       body: JSON.stringify(data),\n    }).then(res => {\n      return Promise.resolve(res);\n    });\n  }\n\n\n}"]},"metadata":{},"sourceType":"module"}